name: Security-First CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  FLASK_APP: app.py
  DATABASE: 'file:testing?mode=memory&cache=shared'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run unit tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest test/ --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  static-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r app.py -f json -o bandit-results.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-results.json

  dynamic-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    services:
      zap:
        image: owasp/zap2docker-stable
        ports:
          - 9090:8080
        options: >-
          -e ZAP_PORT=8080
          -e ZAP_HOST=0.0.0.0
          -e ZAP_AUTH_DISABLEKEY=true
          -e ZAP_SILENT=true

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start Flask application
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: development
        run: |
          flask run --host=0.0.0.0 --port=5000 &
          echo "Waiting for Flask to start..."
          curl --retry 15 --retry-delay 2 --retry-connrefused http://localhost:5000

      - name: Wait for ZAP proxy readiness
        run: |
          echo "Waiting for ZAP API..."
          until curl -sSf http://localhost:9090/JSON/core/view/version; do
            echo "ZAP is not ready yet, retrying in 5 seconds..."
            sleep 5
          done

      - name: Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://host.docker.internal:5000'
          zap_options: '-silent -config api.disablekey=true'
          cmd_options: '-r zap-results.json -J'
          fail_action: false

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: zap-results.json

      - name: Shutdown Flask app
        if: always()
        run: pkill -f "flask run" || true

  security-report:
    needs: [static-analysis, dynamic-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Combine security reports
        run: |
          echo "Security scanning complete. Check artifacts for detailed reports."

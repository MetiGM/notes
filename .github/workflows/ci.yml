name: Security-First CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  FLASK_APP: app.py
  DATABASE: 'file:testing?mode=memory&cache=shared'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run unit tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest test/ --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  static-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r app.py -f json -o bandit-results.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-results.json

  dynamic-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    services:
      zap:
        image: ghcr.io/zaproxy/zaproxy:2.14.0  # Verified working version
        ports:
          - 8080:8080
        options: >-
          --cpus="1.0"
          --memory="2g"
          --health-cmd="curl -sSf http://localhost:8080/JSON/core/view/version >/dev/null || exit 1"
          --health-interval=10s
          --health-retries=20
          --health-start-period=120s
          --health-timeout=30s
        env:
          ZAP_PORT: 8080
          ZAP_HOST: 0.0.0.0
          API_DISABLEKEY: "true"
          ZAP_SILENT: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start Flask application
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: development
        run: |
          flask run --host=0.0.0.0 --port=5000 &
          echo "Waiting for Flask startup..."
          curl --retry 15 --retry-delay 5 --retry-connrefused http://localhost:5000

      - name: Verify container networking
        run: |
          echo "Checking container and network status..."
          docker ps -a
          curl -v http://localhost:8080

      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          target: 'http://localhost:5000'
          zap_url: 'http://localhost:8080'
          zap_options: '-silent -config api.disablekey=true'
          cmd_options: >
            -r zap-results.json
            -J
            -z "-config replacer.full_list(0).description=hostfix
                -config replacer.full_list(0).enabled=true
                -config replacer.full_list(0).matchtype=REQ_HEADER
                -config replacer.full_list(0).matchstr=Host
                -config replacer.full_list(0).regex=false
                -config replacer.full_list(0).replacement=localhost:5000"
          fail_action: false

      - name: Capture ZAP logs
        if: always()
        run: |
          echo "Fetching ZAP logs for debugging..."
          docker logs zap 2>&1 | tee zap-logs.txt
          docker inspect zap 2>&1 | tee zap-inspect.txt

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: |
            zap-results.json
            zap-logs.txt
            zap-inspect.txt

      - name: Shutdown Flask app
        if: always()
        run: |
          echo "Stopping Flask application..."
          pkill -f "flask run" || true

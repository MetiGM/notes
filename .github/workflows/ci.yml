name: Security-First CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  FLASK_APP: app.py
  DATABASE: 'file:testing?mode=memory&cache=shared'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run unit tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest test/ --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  static-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Run Flake8 linter
        run: |
          pip install flake8
          flake8 . > flake8-report.txt || true

      - name: Upload Flake8 results
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.txt

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-results.json

      - name: Check Bandit results
        run: |
          if grep -q '"issue_severity": "HIGH"' bandit-results.json; then
            echo "High-severity issues found by Bandit!"
            exit 1
          fi

  dynamic-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flask  # Ensure Flask is installed

      - name: Set up Nikto
        run: |
          sudo apt-get update
          sudo apt-get install -y nikto

      - name: Check for port conflicts
        run: |
          if lsof -i :5000; then
            echo "Port 5000 is already in use!"
            exit 1
          else
            echo "Port 5000 is free."
          fi

      - name: Start the Flask app
        run: |
          flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
          echo "Flask app started in the background."
        env:
          FLASK_APP: ${{ env.FLASK_APP }}  # Ensure FLASK_APP is set
          FLASK_ENV: development
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE: ${{ env.DATABASE }}
        shell: bash

      - name: Wait for Flask app to start
        run: |
          echo "Waiting for Flask app to start..."
          timeout=300  # 5 minutes
          interval=5
          elapsed=0
          while ! curl -s http://127.0.0.1:5000 > /dev/null; do
            if [ $elapsed -ge $timeout ]; then
              echo "Flask app failed to start within $timeout seconds."
              echo "Flask app logs:"
              cat flask.log
              exit 1
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
            echo "Waiting for Flask app to start... ($elapsed seconds elapsed)"
          done
          echo "Flask app is running!"

      - name: Debug running processes
        run: |
          ps aux | grep flask

      - name: Debug network connections
        run: |
          netstat -tuln

      - name: Run Nikto scan
        run: |
          nikto -h http://127.0.0.1:5000 -o nikto-report.html

      - name: Upload Nikto results
        uses: actions/upload-artifact@v4
        with:
          name: nikto-report
          path: nikto-report.html
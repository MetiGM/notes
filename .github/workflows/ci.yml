name: Security-First CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  FLASK_APP: app.py
  DATABASE: 'file:testing?mode=memory&cache=shared'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run unit tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest test/ --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  static-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r app.py -f json -o bandit-results.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-results.json

  dynamic-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    services:
      zap:
        image: zaproxy/zap-stable  # Corrected image name
        ports:
          - 8080:8080
        options: >-
          --cpus="2.0"
          --memory="4g"
          --health-cmd="curl -sSf http://localhost:8080/JSON/core/view/version >/dev/null || exit 1"
          --health-interval=15s
          --health-retries=15
          --health-start-period=180s
          --health-timeout=10s
          -e ZAP_API_KEY=
          -e ZAP_API_ADDR=0.0.0.0
          -e ZAP_API_ALLOW_INTERFACE=.*

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start Flask application
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          flask run --host=0.0.0.0 --port=5000 &
          echo "Waiting for Flask startup..."
          curl --retry 15 --retry-delay 5 --retry-connrefused http://localhost:5000

      - name: Verify ZAP API availability
        timeout-minutes: 5
        run: |
          echo "Waiting for ZAP API to become ready..."
          curl --retry 15 --retry-delay 10 --retry-all-errors http://localhost:8080/JSON/core/view/version

      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          target: 'http://host.docker.internal:5000'
          cmd_options: >
            -c "scan.rules=40012,40026"
            -J
            -r zap-results.json
          fail_action: false

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: zap-results.json

      - name: Debug ZAP container
        if: failure()
        run: |
          docker ps -a
          CONTAINER_ID=$(docker ps -a -q --filter "ancestor=zaproxy/zap-stable")
          if [ -n "$CONTAINER_ID" ]; then
            docker inspect $CONTAINER_ID
            docker logs $CONTAINER_ID
          fi

      - name: Shutdown Flask app
        if: always()
        run: pkill -f "flask run" || true
name: Security-First CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  FLASK_APP: app.py
  DATABASE: ':memory:'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run unit tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        pytest tests/ --cov=app --cov-report=xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov  

    - name: Run unit tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        pytest tests/ --cov=app --cov-report=xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  static-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r app.py -f json -o bandit-results.json

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-results.json

  dynamic-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    services:
      zap:
        image: ghcr.io/zaproxy/zaproxy:stable
        ports:
          - 8080:8080

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Start Flask application
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        flask run --host=0.0.0.0 --port=5000 &
        echo "Waiting for application startup..."
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:5000

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.6.0
      with:
        target: 'http://localhost:5000'
        cmd_options: >
          -c "scan.rules=40012,40026"
          -J
          -r zap-results.json
        fail_action: false

    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      with:
        name: zap-results
        path: zap-results.json

    - name: Shutdown Flask app
      if: always()
      run: pkill -f "flask run" || true